{"version":3,"sources":["SeasonDisplay.js","Loader.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","message","defaultProps","App","state","errormsg","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDom","render","document","querySelector"],"mappings":"+LAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,yBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,gCACNC,SAAU,eAuBCE,EAXO,SAACC,GACrB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,UARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIC,EAEJP,EAAaS,GAAhCP,EAFuB,EAEvBA,KAAMC,EAFiB,EAEjBA,SACd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,6BAAwBT,EAAxB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,8BAAyBT,EAAzB,aC3BZU,EAAS,SAACP,GACd,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKjDD,EAAOE,aAAe,CACpBD,QAAS,cAGID,QCTTG,E,4MACJC,MAAQ,CAAEV,IAAK,KAAMW,SAAU,I,kEACV,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEN,SAAUS,EAAIb,e,sCAIzC,OAAIc,KAAKX,MAAMC,WAAaU,KAAKX,MAAMV,IAC9B,sCAAYqB,KAAKX,MAAMC,WAE3BU,KAAKX,MAAMC,UAAYU,KAAKX,MAAMV,IAEnC,6BACE,kBAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,OAI9B,kBAAC,EAAD,CAAQO,QAAQ,iC,+BAIvB,OAAO,6BAAMc,KAAKC,qB,GAvBJC,IAAMC,WA2BxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.f781591a.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\r\nimport React from \"react\";\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"The climate is So HOT!\",\r\n    iconName: \"sun\",\r\n  },\r\n  winter: {\r\n    text: \"It's winter bruh! Let's chill\",\r\n    iconName: \"snowflake\",\r\n  },\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat > 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth);\r\n  const { text, iconName } = seasonConfig[season];\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={` icon-left massive ${iconName} icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={` icon-right massive ${iconName} icon`} />\r\n    </div>\r\n  );\r\n};\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\r\n\r\nconst Loader = (props) => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui big text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nLoader.defaultProps = {\r\n  message: \"Loading...\",\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Loader from \"./Loader\";\r\n\r\nclass App extends React.Component {\r\n  state = { lat: null, errormsg: \"\" };\r\n  componentDidMount() {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => this.setState({ lat: position.coords.latitude }),\r\n      (err) => this.setState({ errormsg: err.message })\r\n    );\r\n  }\r\n  renderContent() {\r\n    if (this.state.errormsg && !this.state.lat) {\r\n      return <div>Error:{this.state.errormsg}</div>;\r\n    }\r\n    if (!this.state.errormsg && this.state.lat) {\r\n      return (\r\n        <div>\r\n          <SeasonDisplay lat={this.state.lat} />\r\n        </div>\r\n      );\r\n    }\r\n    return <Loader message=\"Please Allow The Loacation\" />;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.renderContent()}</div>;\r\n  }\r\n}\r\n\r\nReactDom.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}